import streamlit as st
from openai import OpenAI
from openai.types.beta.assistant_stream_event import ThreadMessageDelta
from openai.types.beta.threads.text_delta_block import TextDeltaBlock 

# Retrieve API key and assistant ID from secrets
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
ASSISTANT_ID = st.secrets["ASSISTANT_ID"]

# Initialize the OpenAI client and retrieve the assistant
client = OpenAI(api_key=OPENAI_API_KEY)
assistant = client.beta.assistants.retrieve(assistant_id=ASSISTANT_ID)

# Initialize session state to store conversation history locally
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "thread_id" not in st.session_state:
    st.session_state.thread_id = None

# Title and introduction
st.title("üéæ Rencontre sur le court ‚ù§Ô∏è")
st.write("""
Dans un monde o√π la passion du tennis se m√™le √† des √©motions tumultueuses, L√©a, une jeune femme d√©termin√©e, 
doit naviguer entre ses sentiments pour Luc, un joueur myst√©rieux, et les complications d'une romance naissante, 
tout en affrontant ses propres d√©mons du pass√©.
""")

# Display messages in chat history
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Define the initial hidden pre-prompt for the assistant
initial_preprompt = """
Tu es un romancier de style nouvelle romance 
# Tu commences le chapitre 1 
# Prends le temps d'installer l'histoire et de bien pr√©senter le personnage principal ainsi que le contexte. 
# Avant de commencer la r√©daction ouvre et apprends les informations du chapitre du chapitre en cours dans tes knowledges 
# Je veux que tu applique sans exception les points de l'auteur : 
# A. Le chapitre doit obligatoirement inclure ( exemple La pr√©sentation de Luc par L√©a, il faut que tu int√®gres alors √† la demande de l'auteur une descirption de Luc en suivant les intructions sur comment le d√©crire) 
# B. Le chapitre ne peut inclure ( exemple : si une discussions entre Luc et L√©a est interdite, √† aucun moment tu as le droit de cr√©er une interaction entre eux). 
# C. Choix du lecteur durant le chapitre (il est important de respecter √† la lettre l'odre ainsi que la formulation des choix du lecteur par contre il faut que ce soit dans un contexte pertinent Propose une histoire coh√©rente avec des choix dans un contexte coh√©rent si le choix est une tenue propsoe le quand elle fait son sac ou en sortie de douche et surtout √©vite les r√©p√©titions    
"""

# Define the user pre-prompt
user_preprompt = """
Tu es un romancier de style nouvelle romance.
Prends le temps d'avancer dans l'histoire et surtout de tenir compte des choix du lecteur dans ta r√©ponse. 
Avant de commencer la r√©daction, ouvre et apprends les informations du chapitre en cours dans tes knowledges. 
Je veux que tu appliques sans exception les points de l'auteur :
A. Le chapitre doit obligatoirement inclure (exemple : La pr√©sentation de Luc par L√©a, il faut que tu int√®gres alors √† la demande de l'auteur une description de Luc en suivant les instructions sur comment le d√©crire).
B. Le chapitre ne peut inclure (exemple : si une discussion entre Luc et L√©a est interdite, √† aucun moment tu as le droit de cr√©er une interaction entre eux).
C. Choix du lecteur durant le chapitre (il est important de poser √† la lettre au mot pr√®s les choix du lecteur, mais il faut que ce soit dans un contexte pertinent. Propose une histoire coh√©rente avec des choix dans un contexte coh√©rent. Si le choix est une tenue, propose-le quand elle fait son sac ou en sortie de douche et surtout √©vite les r√©p√©titions).
N'oublie pas, tu dois respecter co√ªte que co√ªte ce que tu dois inclure mais surtout ne pas inclure dans le chapitre. 
√âvite toute r√©p√©tition avec ce que tu as d√©j√† √©crit. Ton r√¥le est de pr√©senter une histoire coh√©rente jusqu'au choix et surtout d'√©viter les r√©p√©titions. Chacune de tes interventions doit faire au minimum 4 gros paragraphes. 
S'il ne reste plus qu'une interaction dans le chapitre, tu dois lancer le chapitre suivant dans ta r√©ponse et donc ouvrir √©galement le document en question.
"""

# Function to start the story with the initial pre-prompt
def commencer_histoire():
    if st.session_state.thread_id is None:
        thread = client.beta.threads.create()
        st.session_state.thread_id = thread.id

        # Send the initial pre-prompt to set the context
        client.beta.threads.messages.create(
            thread_id=st.session_state.thread_id,
            role="user",
            content=initial_preprompt
        )

# Button to start the story
if st.button("Commencer l'histoire"):
    commencer_histoire()

# Textbox and streaming process
if user_query := st.chat_input("Vous :"):

    # Ensure the thread is created and the pre-prompt is sent
    if st.session_state.thread_id is None:
        commencer_histoire()

    # Combine the user's input with the pre-prompt
    full_message = f"{user_preprompt}\n\nR√©ponse du lecteur : {user_query}"

    # Display the user's query
    with st.chat_message("user"):
        st.markdown(user_query)

    # Store the user's query into the history
    st.session_state.chat_history.append({"role": "user",
                                          "content": user_query})
    
    # Add user query to the thread with the pre-prompt
    client.beta.threads.messages.create(
        thread_id=st.session_state.thread_id,
        role="user",
        content=full_message
    )

    # Stream the assistant's reply
    with st.chat_message("assistant"):
        stream = client.beta.threads.runs.create(
            thread_id=st.session_state.thread_id,
            assistant_id=ASSISTANT_ID,
            stream=True
        )
        
        # Empty container to display the assistant's reply
        assistant_reply_box = st.empty()
        
        # A blank string to store the assistant's reply
        assistant_reply = ""

        # Iterate through the stream 
        for event in stream:
            if isinstance(event, ThreadMessageDelta):
                if isinstance(event.data.delta.content[0], TextDeltaBlock):
                    assistant_reply_box.empty()
                    assistant_reply += event.data.delta.content[0].text.value
                    assistant_reply_box.markdown(assistant_reply)
        
        # Once the stream is over, update chat history
        st.session_state.chat_history.append({"role": "assistant",
                                              "content": assistant_reply})
